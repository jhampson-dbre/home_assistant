---
- name: Ensure OS is up to date
  apt:
    update_cache: yes
    upgrade: full
  register: apt_out

- name: Check if reboot required
  stat:
    path: /var/run/reboot-required
  register: pending_reboot

- name: Reboot if required to apply any updates
  reboot:
  when: "'linux-image' in apt_out.stdout or pending_reboot.stat.exists"

- name: Install OS packages for remote management
  apt:
    name:
      - sudo
      - python3-pip
    state: present

- name: Create non-root home assistant user account
  user:
    name: "{{ home_assistant_user }}"
    password: '*'
    shell: /bin/bash
    groups:
      - sudo
    append: yes

- name: Ensure ssh directory exists for current user on the control machine
  file:
    path: "{{ lookup('env','HOME') + '/.ssh' }}"
    mode: "0700"
  become: no
  delegate_to: localhost
  run_once: true

- name: Check if controller SSH private key exists
  stat:
    path: "{{ lookup('env','HOME') + '/.ssh/id_rsa' }}"
  register: existing_ssh_key
  become: no
  delegate_to: localhost
  run_once: true

- name: Check if controller SSH public key available
  stat:
    path: "{{ lookup('env','HOME') + '/.ssh/id_rsa.pub' }}"
  register: existing_ssh_pubkey
  become: no
  delegate_to: localhost
  run_once: true
  when: existing_ssh_key.stat.exists

- name: Backup existing SSH keypair if we need new keys
  copy:
    src: "{{ key_file }}"
    dest: "{{ key_file + '.bak' }}"
    backup: yes
    mode: '0600'
  loop:
    - "{{ lookup('env','HOME') + '/.ssh/id_rsa' }}"
    - "{{ lookup('env','HOME') + '/.ssh/id_rsa.pub' }}"
  loop_control:
    loop_var: key_file
  when: not existing_ssh_pubkey.stat.exists
  become: no
  delegate_to: localhost
  run_once: true
  register: result
  ignore_errors: '"Could not find" in result.msg'

- name: Create SSH key pair on the control machine to connect using home assistant user
  openssh_keypair:
    path: "{{ lookup('env','HOME') + '/.ssh/id_rsa' }}"
    comment: "homeassistant"
  when: not existing_ssh_pubkey.stat.exists
  become: no
  delegate_to: localhost
  run_once: true

- name: Add public key to home assistant user authorized keys
  authorized_key:
    user: "{{ home_assistant_user }}"
    state: present
    key: "{{ lookup('file', lookup('env', 'HOME') + '/.ssh/id_rsa.pub') }}"

- name: Enable passwordless sudo
  lineinfile:
    path: /etc/sudoers
    state: present
    regexp: '^%sudo'
    line: '%sudo ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'

- name: Ensure hostname is in /etc/hosts
  lineinfile:
    path: /etc/hosts
    state: present
    regexp: '{{ ansible_hostname }}$'
    line: "{{ has_reserved_ip | ternary(ansible_default_ipv4['address'], '127.0.1.1') }} {{ ansible_hostname }}"
